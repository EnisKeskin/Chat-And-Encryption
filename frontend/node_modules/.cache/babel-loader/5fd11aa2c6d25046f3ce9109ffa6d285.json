{"ast":null,"code":"import io from 'socket.io-client';\nimport Ip from './config';\nconsole.log(Ip);\n\nclass socketConnect {\n  constructor() {\n    this.connections = [];\n    this.room2 = [];\n  }\n\n  connectionsRoom(room, token) {\n    this.room2 = this.connections[room];\n\n    if (this.room2 && this.room2.query) {\n      this.room2.query.token = token ? token : null;\n    }\n\n    this.connections[room] = this.room2 ? this.room2 : io(\"\".concat(Ip) + room, token ? {\n      query: {\n        token: token\n      }\n    } : null);\n    return this.connections[room];\n  }\n\n  connectionsRoomDelete() {\n    return this.connections = [];\n  }\n\n}\n\nconst socket = new socketConnect();\nexport default socket;","map":{"version":3,"sources":["/home/enis/Desktop/BilgiGuvenligiProje/frontend/src/connection.js"],"names":["io","Ip","console","log","socketConnect","constructor","connections","room2","connectionsRoom","room","token","query","connectionsRoomDelete","socket"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,OAAOC,EAAP,MAAe,UAAf;AACAC,OAAO,CAACC,GAAR,CAAYF,EAAZ;;AACA,MAAMG,aAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAG;AACV,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,KAAL,GAAa,EAAb;AACH;;AAEDC,EAAAA,eAAe,CAACC,IAAD,EAAOC,KAAP,EAAc;AACzB,SAAKH,KAAL,GAAa,KAAKD,WAAL,CAAiBG,IAAjB,CAAb;;AACA,QAAI,KAAKF,KAAL,IAAc,KAAKA,KAAL,CAAWI,KAA7B,EAAoC;AAChC,WAAKJ,KAAL,CAAWI,KAAX,CAAiBD,KAAjB,GAAyBA,KAAK,GAAGA,KAAH,GAAW,IAAzC;AACH;;AACD,SAAKJ,WAAL,CAAiBG,IAAjB,IAAyB,KAAKF,KAAL,GAAa,KAAKA,KAAlB,GAA0BP,EAAE,CAAC,UAAGC,EAAH,IAAUQ,IAAX,EAAiBC,KAAK,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAEA;AAAT;AAAT,KAAH,GAAiC,IAAvD,CAArD;AACA,WAAO,KAAKJ,WAAL,CAAiBG,IAAjB,CAAP;AACH;;AAEDG,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKN,WAAL,GAAmB,EAA1B;AACH;;AAjBe;;AAoBpB,MAAMO,MAAM,GAAG,IAAIT,aAAJ,EAAf;AAEA,eAAeS,MAAf","sourcesContent":["import io from 'socket.io-client';\nimport Ip from './config';\nconsole.log(Ip)\nclass socketConnect {\n    constructor() {\n        this.connections = []\n        this.room2 = []\n    }\n\n    connectionsRoom(room, token) {\n        this.room2 = this.connections[room];\n        if (this.room2 && this.room2.query) {\n            this.room2.query.token = token ? token : null;\n        }\n        this.connections[room] = this.room2 ? this.room2 : io(`${Ip}` + room, token ? { query: { token: token } } : null);\n        return this.connections[room]\n    }\n\n    connectionsRoomDelete() {\n        return this.connections = [];\n    }\n\n}\nconst socket = new socketConnect();\n\nexport default socket\n"]},"metadata":{},"sourceType":"module"}